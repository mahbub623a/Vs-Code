{
    "Inbuilt Modification": {
        "body": [
            "-------------------------$Inbuilt_Modification---------------------------"
        ],
        "description": ""
    },
    "CP template": {
        "prefix": "Mahbub",
        "body": [
            "/*",
            "    author  : Mahbub",
            "    created : ${CURRENT_MONTH_NAME_SHORT}/${CURRENT_DATE}/${CURRENT_YEAR}, ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
            "*/",
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "#define int long long",
            "#define double long double",
            "",
            "void OTC()",
            "{",
            "    ${0:/* code */}",
            "",
            "",
            "}",
            "",
            "signed main()",
            "{",
            "    ios::sync_with_stdio(false), cin.tie(0);",
            "    ${1:int tc;\n\tcin >> tc;\n\twhile (tc--)}",
            "        OTC();",
            "    return 0;",
            "}"
        ],
        "description": "Competitive programig template"
    },
    "C++ template": {
        "prefix": "cpp",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "",
            "int main()",
            "{",
            "\t$0",
            "",
            "    return 0;",
            "}"
        ],
        "description": "Competitive programming template"
    },
    "Shortcut": {
        "body": [
            "------------------------------$Shortcut-----------------------------------"
        ],
        "description": ""
    },
    "Input-Output ": {
        "prefix": "inpOut",
        "body": [
            "#ifndef ONLINE_JUDGE",
            "    freopen(\"InpOut/input.txtt\", \"r\", stdin);",
            "    freopen(\"InpOut/output.txt\", \"w\", stdout);",
            "#endif"
        ],
        "description": "Input-Output "
    },
    "Documentation": {
        "prefix": "doc",
        "body": [
            "// Find Frequency                       -> count(vec.begin(), vec.end(), value);",
            "// Find max element                     -> *max_element(vec.begin(),vec.end());",
            "// Find max element's index             -> max_element(vec.begin(),vec.end()) - vec.begin();",
            "// String uppercae                      -> transform(str.begin(),str.end(), str.begin(), ::toupper);",
            "// String lowercase                     -> transform(str.begin(),str.end(), str.begin(), ::tolower);",
            "// Find substring's index forword       -> find(\"abc\")",
            "// Find substring's index backword      -> rfind(\"abc\")"
        ],
        "description": "Documentation"
    },
    "Algorithm": {
        "body": [
            "--------------------------------$Algorithm--------------------------------"
        ],
        "description": ""
    },
    "Find power": {
        "prefix": "power",
        "body": [
            "template <class T>",
            "constexpr T power(T a, unsigned long long b, T res = 1)",
            "{",
            "    for (; b != 0; b /= 2, a *= a)",
            "        if (b & 1)",
            "            res *= a;",
            "    return res;",
            "}"
        ],
        "description": "Find power"
    },
    "Power Modulo": {
        "prefix": "powerModulo",
        "body": [
            "template <class T>",
            "constexpr T power(T a, unsigned long long b, T res = 1)",
            "{",
            "    for (; b != 0; b /= 2, a = (a * a) % MOD)",
            "        if (b & 1)",
            "            res = (res * a) % MOD;",
            "    return res;",
            "}",
            ""
        ],
        "description": "Power Modulo"
    },
    "Is power ": {
        "prefix": "isPower",
        "body": [
            "bool isPower(int n, int x)",
            "{",
            "    if (x <= 1)",
            "        return n == 1;",
            "    double logResult = log(n) / log(x);",
            "    return fabs(logResult - round(logResult)) < 1e-9;",
            "}"
        ],
        "description": "Is power"
    },
    "Sub String Check": {
        "prefix": "subString",
        "body": [
            "bool subString(string main, string sub)",
            "{",
            "    if (main.find(sub) != string::npos)",
            "        return true;",
            "    else",
            "        return false;",
            "}"
        ],
        "description": "Sub String Check"
    },
    "Sum of a Digit": {
        "prefix": "digitSum",
        "body": [
            "int digitSum(int k)",
            "{",
            "    int sum = 0;",
            "    while (k)",
            "    {",
            "        sum += k % 10;",
            "        k /= 10;",
            "    }",
            "    return sum;",
            "}"
        ],
        "description": "Sum of a Digit"
    },
    "Find divisors": {
        "prefix": "divisors",
        "body": [
            "vector<int> divisors(int n)",
            "{",
            "    vector<int> div;",
            "    for (int i = 1; i * i <= n; i++) {",
            "        if (n % i == 0) {",
            "            div.push_back(i);",
            "            if (i != n / i)",
            "                div.push_back(n / i);",
            "        }",
            "    }",
            "    return div;",
            "}"
        ],
        "description": "Find divisors"
    },
    "Prime check": {
        "prefix": "prime",
        "body": [
            "bool prime(int n)",
            "{",
            "    for (int i = 2; i * i <= n; i++)",
            "        if (n % i == 0)",
            "            return false;",
            "    return n > 1;",
            "}"
        ],
        "description": "Prime check"
    },
    "Sieve Erathosthenis": {
        "prefix": "sieve",
        "body": [
            "void sieve(int n)",
            "{",
            "    vector<bool> primes(n+1, true);",
            "    primes[0] = primes[1] = false;",
            "",
            "    for (int i = 2; i * i <= n; i++) {",
            "        if (primes[i])",
            "            for (int j = i * i; j <= n; j += i)",
            "                primes[j] = false;",
            "    }",
            "}"
        ],
        "description": "Sieve Erathosthenis"
    },
    "Find prime factor": {
        "prefix": "primeFactor",
        "body": [
            "vector<int> primeFactor(int n)",
            "{",
            "    vector<int> prime;",
            "    for (int i = 2; i * i <= n; i++) {",
            "        while (n % i == 0) {",
            "            prime.push_back(i);",
            "            n /= i;",
            "        }",
            "    }",
            "    if (n > 1)",
            "        prime.push_back(n);",
            "    return prime;",
            "}"
        ],
        "description": "Find prime factor"
    }
}